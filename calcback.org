#+TITLE: Calcback
#+AUTHOR: Nikolai Weidt
#+Email: weidtn@gmail.com
#+PROPERTY: header-args:python :session *python*
#+PROPERTY: cache yes
#+PROPERTY: latexpreview inlineimages
#+PROPERTY: attr_html:width 600px
#+options: toc:2
#+latex_header: \usepackage{float}
#+PANDOC_OPTIONS: pdf-engine:xelatex


* What is this?
This is a script to get the complex refractive index $n = n * ik$ from the ellipsometric parameters $\Delta$ and $\Psi$ I got from a simulation.
The result for 300nm SiO_2 should look like this:

#+CAPTION: Refractive index should look like this
#+NAME: sio2
#+attr_latex: :width \textwidth
#+attr_html: :width 500
#+attr_org: :width 500
[[./RefractiveIndexSiO2.png]]
* List of Todos:

** TODO Write a loop for all wavelengths after it works for one.
** TODO Then take even more wavelengths (rows)
* Imports:
#+BEGIN_SRC python :results output silent :tangle yes
  import numpy as np
  import matplotlib
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt
#+END_SRC 

* Defining some variables:
Defining some variables for later use:

#+BEGIN_SRC python :results output silent :tangle yes
  CSVFILE = "100nmSiO2_matlab.csv"  # head300nmSiO2.csv = only 10 rows of data
  phi_i = 70 * np.pi / 180  # converting incident angle from deg (first number) to rad
  d_L = 100  # thickness of layer in nm
  n_air = 1  # refractive index of air
  rerange = 5  # upper limit for real part
  imrange = 1  # upper limit for imaginary part
  # i = 88  # only look at one wavelength (row in csv)
#+END_SRC

* Read .csv-file:
Read the values into a two dimensional numpy array as [[lambda,Psi,Delta,n_S, k_S],...] (Skip columns 3 and 4)
  
#+BEGIN_SRC python :results output silent :tangle yes
csv = np.loadtxt(CSVFILE, delimiter=",", skiprows=1)
#+END_SRC

:DEBUG:
The array looks like this:
#+BEGIN_SRC python :results value table :exports both
csv
#+END_SRC

#+RESULTS:
| (400 52.482 -75.536) | (401 52.907 -75.554) | (402 53.338 -75.572) | ... | (798 33.057 78.649) | (799 33.019 78.676) | (800 32.981 78.702) |

* Calculate \rho
** Create a matrix containing every possible refractive index (n+ik):

Change the last number in the "linspaces" to adjust the resolution.

#+BEGIN_SRC python :results silent :tangle yes
  lsp_re = np.linspace(1, rerange, 1001)
  # lsp_im = np.linspace(0.01, imrange, 1001)
  # lsp_im = 0.1
  # re, im = np.meshgrid (lsp_re, lsp_im, copy=False)
  # n_L = 1j * np.round(im,6) + np.round(re,6)
  # n_L = n_L.flatten() # create onedimensional array
  n_L = lsp_re
#+END_SRC

:DEBUG:
This gives the following matrix:
#+BEGIN_SRC python :results value verbatim :exports both :tangle no
  n_L
#+END_SRC

#+RESULTS:
: [1.    1.004 1.008 ... 4.992 4.996 5.   ]

:END:

** Calculate \rho: 
*** First we define some functions:
**** Snell's Law to calculate the refractive angles:
Phi is the incident angle for the layer, n1 and n2 are refractive indices of first and second medium. Returns the angle of refraction.

#+CAPTION: Snell's Law
#+NAME: fig:snell
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
#+ATTR_LATEX: :width \textwidth
#+ATTR_LATEX: :placement [H]
[[./snell.jpg]]
#+BEGIN_SRC python :results silent :tangle yes
  def snell(phi, n1, n2):
    """Calculates the refractive angle, parameters are incident angle phi, refractive index of first medium n1 and of second medium n2"""
    phi_ref = np.arcsin((n1/n2)*np.sin(phi))
    return phi_ref
#+END_SRC   


**** Calculate r_p and r_s with Fresnel equations:
#+BEGIN_SRC python :results silent :tangle yes
  def fresnel(n1, phi1, n2, phi2):
      """Takes refractive indices and angles of two layers to calculate the amplitude reflection coefficients"""
      rs = (n1 * np.cos(phi1) - n2 * np.cos(phi2)) / (n1 * np.cos(phi1) + n2 * np.cos(phi2))
      rp = (n2 * np.cos(phi1) - n1 * np.cos(phi2)) / (n2 * np.cos(phi1) + n1 * np.cos(phi2))
      return rs, rp
#+END_SRC


**** Calculate \rho for the layer with eq. 5.2 in Spectroscopic Ellipsometry citenum:fujiwara2009spectroscopic:
#+BEGIN_SRC python :results output :tangle yes
  def calc_diff(n_L, rho_giv):
      #Snell's Law:
      phi_L = snell(phi_i, n_air, n_L)
      phi_S = snell(phi_L, n_L, n_S)
      # Fresnel equations:
      # air/layer:
      rs_al, rp_al = fresnel(n_air, phi_i, n_L, phi_L)
      # layer/substrate:
      rs_ls, rp_ls = fresnel(n_L, phi_L, n_S, phi_S)

      beta = (2 * np.pi / lambda_vac) * d_L * n_L * np.cos(phi_L)
      rp_L = (rp_al + rp_ls * np.exp(-2 * 1j * beta)) / (
          1 + rp_al * rp_ls * np.exp(-2 * 1j * beta))
      rs_L = (rs_al + rs_ls * np.exp(-2 * 1j * beta)) / (
          1 + rs_al * rs_ls * np.exp(-2 * 1j * beta))
      rho_L = rp_L / rs_L
      return abs(rho_giv - rho_L), rho_L
#+END_SRC

#+RESULTS:


*** Then we call these functions one after another to calculate \rho:
Get refractive index of the substrate (n_S) and lambda from the csv:
#+BEGIN_SRC python :results output silent :tangle yes
  lambda_vac = csv[i][0]
  # n_S = (csv[i][3] + 1j * csv[i][4])
  n_S = 3.8 - 0.1*1j
#+END_SRC

#+RESULTS:

:DEBUG:
#+BEGIN_SRC python :results value scalar :tangle no :exports none
  # lambda_vac
  # phi_L
  # phi_S
  # rs_al
  # rp_al
  # rs_ls
  # rp_ls
  # rho_L
  # csv[:,0] # list of lambdas
  # n_S
#+END_SRC

#+RESULTS:

:END:


*** Identify the best fitting rho with \rho = tan(\psi) * e^i\Delta :

#+BEGIN_SRC python :results output :exports both :tangle yes
  # psi is in our csv-file at index 1, delta at index 2 at row "i" for lambda
  n_array = [] 
  rho_array = []
  for i, row in enumerate(csv):
      lambda_vac = csv[i][0]
      psi = csv[i][1] * (np.pi/180)
      delta = csv[i][2] * (np.pi/180)
      n_S = 3.8 - 0.1*1j
      # n_S = csv[i][3] + csv[i][4] * 1j
      rho_giv = np.tan(psi) * np.exp(1j * delta)
      diff, rho_L = calc_diff(n_L, rho_giv)
      idx = np.argmin(diff)  # index of the minimum
      minimum = min(diff)
      n_array = np.append(n_array, n_L[idx])
      rho_array = np.append(rho_array, rho_L[idx])
  psi_L = np.arctan(abs(rho_array)) * 180/np.pi
  delta_L = np.angle(rho_array) * 180/np.pi
  # print("the layer has the refractive index n_L = " , n_array)
#+END_SRC

#+RESULTS:

* Plot some things for checking results:

If we use a high resolution, those plots are not showing much, thats why they are only showing the first 10000 values.
** Plot \Delta & \Psi:

\Psi from input in blue, \Psi_L in red.
#+BEGIN_SRC python :exports both :results file
  fig = plt.figure()
  plt.plot(csv[:,0],csv[:,1], 'b')
  plt.plot(csv[:,0],psi_L, 'r')
  plt.ylabel("Psi")
  plt.xlabel("Wavelenght (nm)")
  plt.savefig("psi.png")
  "psi.png"
#+END_SRC

#+RESULTS:
[[file:psi.png]]

#+BEGIN_SRC python :exports both :results file
  fig = plt.figure()
  plt.plot(csv[:,0],csv[:,2], 'b')
  plt.plot(csv[:,0],delta_L, 'r')
  plt.ylabel("Delta")
  plt.xlabel("Wavelenght (nm)")
  plt.savefig("delta.png")
  "delta.png"
#+END_SRC

#+RESULTS:
[[file:delta.png]]


** Plot refractive index of substrate n_S:

Real part n in blue, imaginary part k in red

#+BEGIN_SRC python :exports both :results file :tangle no
  fig = plt.figure()
  plt.plot(csv[:,0], csv[:,3], 'b')
  plt.plot(csv[:,0], csv[:,4], 'r')
  plt.xlabel("wavelength")
  plt.ylabel("refractive index of substrate")
  plt.savefig("ns.png")
  "ns.png"
#+END_SRC

#+RESULTS:
[[file:ns.png]]
** Plot real and imaginary part of the created n_L matrix:

Real part is blue, imaginary is red.

#+BEGIN_SRC python :results file :tangle no :exports both
  fig = plt.figure()
  plt.plot(np.real(n_L[:10000]), c='b')
  plt.plot(np.imag(n_L[:10000]), c="r")
  plt.savefig('n_L.png')
  './n_L.png'
#+END_SRC

#+RESULTS:
[[file:./n_L.png]]

** Plot of the difference between \rho_L and the given \rho and determined minimum:

The difference is shown in blue, the red lines show the minimum.

#+BEGIN_SRC python :results file :tangle no :exports both 
  fig = plt.figure()
  plt.axvline(idx, c='r')
  plt.axhline(minimum, c='r')
  plt.plot(diff)
  plt.xlabel("index")
  plt.ylabel("difference of rhos")
  plt.savefig('diff.png')
  "./diff.png"
#+END_SRC

#+RESULTS:
[[file:./diff.png]]

** Plot refractive angle phi_L and n_L:

n_L is shown in green, real part of phi_L in blue, imaginary in red. 
A relation between these should be visible.

#+BEGIN_SRC python :results file :tangle no :exports both 
  fig = plt.figure()
  plt.plot(np.real(snell(phi_i, n_air, n_L)[:3000]), 'b')
  plt.plot(np.imag(snell(phi_i, n_air, n_L)[:3000]), 'r')
  plt.plot(np.real(n_L)[:3000], c='g')
  plt.savefig('phi_L.png')
  "phi_L.png"
#+END_SRC

#+RESULTS:
[[file:phi_L.png]]


** Plot \rho_given - \rho_L

Red line shows the found refractive index at the minimum 

#+BEGIN_SRC python :results file :exports both
  fig = plt.figure()
  rho_grid = calc_diff(n_L, rho_giv)
  # plt.imshow(rho_grid,origin='lower',extent=(n.min(),n.max(),k.min(),k.max()),
             # aspect = (n.max()-n.min())/(k.max()-k.min()))
  # plt.colorbar()
  plt.axvline(n_L[idx], c='r')
  plt.xlabel('refractive index')
  plt.ylabel('abs(rho_given - rho-l)')
  plt.axvline(n_array, color="r")
  plt.plot(n_L, rho_grid)
  # plt.show()
  plt.savefig('minimumplot.png') 
  "minimumplot.png"
#+END_SRC

#+RESULTS:
[[file:minimumplot.png]]

** Plot n

#+BEGIN_SRC python :results file :tangle no :exports both
  fig = plt.figure()
  plt.xlabel("wavelenght")
  plt.ylabel("refractive index")
  plt.axis([400, 800, 1.4, 1.6])
  plt.plot(csv[:,0], n_array, 'b')
  plt.savefig('index.png') 
  "index.png"
#+END_SRC

#+RESULTS:
[[file:index.png]]
* Testing: 

Testing with constant n_L, phi_i at i=0
  #+BEGIN_SRC python :results table :export none
   [("n_L[0]",n_L[0]),("phi_i",phi_i)]
  #+END_SRC

  #+RESULTS:
  | n_L[0] |                1.0 |
  | phi_i  | 1.2217304763960306 |

** snell():

#+BEGIN_SRC python :results value :export both
  phi_Ltest = snell(phi_i, n_air, n_L[0])
  phi_Ltest
#+END_SRC

#+RESULTS:
: 1.2217304763960306
should be: (1.220429-0.02737074 i)

#+BEGIN_SRC python :export both
("n_S",n_S)
#+END_SRC

#+RESULTS:
| n_S | (3.8-0.1j) |

#+BEGIN_SRC python :exports both :results value
  phi_Stest = snell(1.220429-0.0273775j,n_L[0],n_S)
  phi_Stest
#+END_SRC

#+RESULTS:
| 0.24974265298335885+0.0041599325797282705j |
should be: (0.151671-0.175494i)

  
  
** fresnel():

  # Fresnel equations:
  # air/layer:
  rs_al, rp_al = fresnel(n_air, phi_i, n_L, phi_L)
  # layer/substrate:
  rs_ls, rp_ls = fresnel(n_L, phi_L, n_S, phi_S)

#+BEGIN_SRC python :exports both :results value
  rs_altest, rp_altest = fresnel(n_air, phi_i, n_L[0], phi_Ltest)
  rs_altest
#+END_SRC

#+RESULTS:
: 0.0
should be: (-0.003398-0.04239i)
#+BEGIN_SRC python :exports both :results value
rp_altest
#+END_SRC

#+RESULTS:
: 0.0
should be: 

#+BEGIN_SRC python :exports both :results value
  rs_lstest, rp_lstest = fresnel(n_L[0], phi_Ltest, n_S, phi_Stest)
  rs_lstest
#+END_SRC

#+RESULTS:
| -0.8301189347099263+0.004255636950432529j |

#+BEGIN_SRC python :exports both
rp_lstest
#+END_SRC

#+RESULTS:
| 0.14595720164800038-0.012356085336865424j |

** calc_rho():

rho_L = calc_rho(rs_al, rp_al, rs_ls, rp_ls, d_L, n_L, lambda_vac)
 Just copied this from above with beta returned 
#+BEGIN_SRC python :results silent :exports both
  def calc_rhotest(rs_al, rp_al, rs_ls, rp_ls, d, n, phi, lambda_vac):
      beta = 2 * np.pi * d * n * np.cos(phi) / lambda_vac
      rp_L = (rp_al + rp_ls * np.exp(-2*1j*beta)) / (1 + rp_al * rp_ls * np.exp(-2 * 1j * beta))
      rs_L = (rs_al + rs_ls * np.exp(-2*1j*beta)) / (1 + rs_al * rs_ls * np.exp(-2 * 1j * beta))
      rho_L = rp_L / rs_L
      return rho_L, beta
#+END_SRC

  #+BEGIN_SRC python :exports both :results value  
    rhotest, betatest = calc_rhotest(rs_altest, rp_altest, rs_lstest, rp_lstest, 300, n_L[0], phi_Ltest, lambda_vac)
    betatest
  #+END_SRC

  #+RESULTS:
  : 0.805865977238737
  should be: 2.1558487+0.18312240i
  
 #+BEGIN_SRC python :exports both :results value
   rhotest 
 #+END_SRC 

 #+RESULTS:
 | -0.17589853931798238+0.013982966208899696j |

 
 
bibliography:forschungspraktikum.bib
