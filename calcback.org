#+TITLE: Calcback
#+AUTHOR: Nikolai Weidt
#+Email: weidtn@gmail.com
#+PROPERTY: header-args:python :session *python*
#+PROPERTY: cache yes

* What is this?
I'm coding a program to get the complex refractive index $n = n * ik$ from the ellipsometric parameters $\Delta$ and $\Psi$ I got from a simulation.
* Imports:
#+BEGIN_SRC python :results output silent
import numpy as np
import matplotlib
from matplotlib import pyplot
#+END_SRC 

* Defining some variables:
Defining some variables for later use:

#+BEGIN_SRC python :results output silent
  CSVFILE = "head300nmSiO2.csv"
  phi_i = 70 * np.pi / 180
  d_L = 300
  n_air = 1
  rerange = 5
  imrange = 5
  i = 0
#+END_SRC

* Read .csv-file:
Read the values into a two dimensional numpy array as [[lambda,Psi,Delta,n_S,k_S],...] (Skip columns 3 and 4)
  
#+BEGIN_SRC python :results output silent
csv = np.loadtxt(CSVFILE, usecols=(0,1,2,5,6),  delimiter=",", skiprows=1)
#+END_SRC

:DEBUG:
The array looks like this:
#+BEGIN_SRC python :results output :exports both
print(csv)
#+END_SRC
#+RESULTS:
: [[300.          55.2217535   84.37228319   2.6726       3.0375    ]
:  [303.          50.11187439  93.3085011    2.7346       3.0381    ]
:  [306.          46.35824553  98.43681392   2.7967       3.0368    ]
:  [309.          43.50539341 101.18051798   2.8588       3.0334    ]
:  [312.          41.29392865 102.19236832   2.9206       3.0279    ]
:  [315.          39.48751217 101.93002      2.9822       3.0205    ]
:  [318.          37.90308303 100.64846104   3.0435       3.0109    ]
:  [321.          36.47640803  98.54577151   3.1042       2.9994    ]
:  [324.          35.12615859  95.72242205   3.1644       2.9858    ]]

* Calculate $\rho$
** Create a matrix containing every possible refractive index (n+ik):
#+BEGIN_SRC python :results silent
  lsp_re = np.linspace(0.1, rerange, 101)
  lsp_im = np.linspace(0.1, imrange, 101)
  re, im = np.meshgrid (lsp_re, lsp_im, copy=False)
  matrix = 1j * im + re
#+END_SRC

:DEBUG:
This gives the following matrix:
#+BEGIN_SRC python :results output :exports both :tangle no
print(matrix)
#+END_SRC

#+RESULTS:
#+begin_example
[[0.1  +0.1j   0.149+0.1j   0.198+0.1j   ... 4.902+0.1j   4.951+0.1j
  5.   +0.1j  ]
 [0.1  +0.149j 0.149+0.149j 0.198+0.149j ... 4.902+0.149j 4.951+0.149j
  5.   +0.149j]
 [0.1  +0.198j 0.149+0.198j 0.198+0.198j ... 4.902+0.198j 4.951+0.198j
  5.   +0.198j]
 ...
 [0.1  +4.902j 0.149+4.902j 0.198+4.902j ... 4.902+4.902j 4.951+4.902j
  5.   +4.902j]
 [0.1  +4.951j 0.149+4.951j 0.198+4.951j ... 4.902+4.951j 4.951+4.951j
  5.   +4.951j]
 [0.1  +5.j    0.149+5.j    0.198+5.j    ... 4.902+5.j    4.951+5.j
  5.   +5.j   ]]
#+end_example

:END:
** Calculate: 
   
#+BEGIN_SRC python :results output silent
  n_S = (csv[i,3] + 1j* csv[i,4])
  lambda_vac = csv[i,0]
  for n_L in matrix.flat:
        # Snell's Law:
        phi_L = np.arcsin((np.sin(phi_i)*n_air)/ n_L)
        phi_S = np.arcsin((np.sin(phi_L)*n_L)/ n_S)
        # Fresnel equations:
        #
        # air/layer:
        rs_al = (n_air * np.cos(phi_i) - n_L * np.cos(phi_L)) / (n_air * np.cos(phi_i) + n_L * np.cos(phi_L))
        rp_al = (n_L * np.cos(phi_i) - n_air * np.cos(phi_L)) / (n_L * np.cos(phi_i) + n_air * np.cos(phi_L))
        # layer/substrate:
        rs_ls = (n_L * np.cos(phi_L) - n_S * np.cos(phi_S)) / (n_L * np.cos(phi_L) + n_S * np.cos(phi_S))
        rp_ls = (n_S * np.cos(phi_L) - n_L * np.cos(phi_S)) / (n_S * np.cos(phi_L) + n_L * np.cos(phi_S))
        # Fujiwara:
        beta = 2 * np.pi * d_L * n_L * np.cos(phi_L) / lambda_vac
        rp_L = (rp_al + rp_ls * np.exp(-2*1j*beta)) / (1 + rp_al * rp_ls * np.exp(-2 * 1j * beta)) 
        rs_L = (rs_al + rs_ls * np.exp(-2*1j*beta)) / ( 1 + rs_al * rs_ls * np.exp(-2 * 1j * beta))   
        rho = rp_L / rs_L
        output = []
        output.append([n_L, rho])
#+END_SRC


:DEBUG:
#+BEGIN_SRC python :results output :tangle no :exports results 
    print ("for n_L = ", n_L)
    print("at lambda = ", lambda_vac)
    print("phi_L", phi_L)
    print("phi_S", phi_S)
    print("rs_al", rs_al)
    print("rp_al", rp_al)
    print("rs_ls", rs_ls)
    print("rp_ls", rp_ls)
    print("beta", beta)
    print("rp_L", rp_L)
    print("rs_L", rs_L)
    print("rho", rho)
    print("output", output)
#+END_SRC

#+RESULTS:
#+begin_example
for n_L =  (5+5j)
at lambda =  300.0
phi_L (0.09369049752311029-0.0942436309601521j)
phi_S (0.1516718935900151-0.1754940397472108j)
rs_al (-0.9322788656900732-0.06447800755339925j)
rp_al (0.47076999129408226+0.32915273622391117j)
rs_ls (0.2706645644366405-0.037805743704596925j)
rp_ls (-0.27413124901624036+0.021323198111731292j)
beta (31.139752412112067+31.69455000949363j)
rp_L (1.426723122645158-0.9975355870956931j)
rs_L (-1.067534044700266+0.07383248803644696j)
rho (-1.3944229215529675+0.8379890813445299j)
output [[(5+5j), (-1.3944229215529675+0.8379890813445299j)]]
#+end_example

:END:

** Compare calculated rho with given $\Delta$ and $\psi$:
